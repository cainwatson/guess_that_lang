name: "Continuous Integration Checks and Deployment"

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        with:
          otp-version: "23"
          elixir-version: "1.11.4"

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Run tests
        run: |
          mix compile --warnings-as-errors
          mix format --check-formatted
          mix test
        env:
          MIX_ENV: test

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check new version
        id: check-new-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          LATEST_TAG_VSN=${LATEST_TAG:1}
          APP_VSN=$(sed -rn 's/.*version: "([[:digit:]]\.[[:digit:]]\.[[:digit:]])".*/\1/p' mix.exs)
          echo \$LATEST_TAG_VSN: $LATEST_TAG_VSN
          echo \$APP_VSN: $APP_VSN
          if [ "$LATEST_TAG_VSN" != "$APP_VSN" ]; then
            echo "is-new-version=true" >> $GITHUB_OUTPUT
            echo "app-vsn=$APP_VSN" >> $GITHUB_OUTPUT
            echo "git-refs-url=https://api.github.com/repos/$GITHUB_REPOSITORY/git/refs" >> $GITHUB_OUTPUT
          fi

      - name: Create Tag
        if: steps.check-new-version.outputs.is-new-version
        run: |
          echo \$GIT_REFS_URL: ${{ steps.check-new-version.outputs.git-refs-url }}
          echo \$GITHUB_SHA: $GITHUB_SHA
          curl -f -s -S -X POST ${{ steps.check-new-version.outputs.git-refs-url }} \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- << EOF
          {
            "ref": "refs/tags/v${{ steps.check-new-version.outputs.app-vsn }}",
            "sha": "$GITHUB_SHA"
          }
          EOF

      - name: Install flyctl
        if: steps.check-new-version.outputs.is-new-version
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy new release
        if: steps.check-new-version.outputs.is-new-version
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
