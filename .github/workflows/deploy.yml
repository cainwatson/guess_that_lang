name: Create tag and deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check new version
        id: check-new-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          LATEST_TAG_VSN=${LATEST_TAG:1}
          APP_VSN=$(sed -rn 's/.*version: "([[:digit:]]\.[[:digit:]]\.[[:digit:]])".*/\1/p' mix.exs)
          echo \$LATEST_TAG_VSN: $LATEST_TAG_VSN
          echo \$APP_VSN: $APP_VSN
          if [ "$LATEST_TAG_VSN" != "$APP_VSN" ]; then
            echo "::set-output name=is-new-version::true"
            echo "::set-output name=app-vsn::$APP_VSN"
            echo "::set-output name=git-refs-url::https://api.github.com/repos/$GITHUB_REPOSITORY/git/refs"
          fi

      - name: Create Tag
        if: steps.check-new-version.outputs.is-new-version
        run: |
          echo \$GIT_REFS_URL: ${{ steps.check-new-version.outputs.git-refs-url }}
          echo \$GITHUB_SHA: $GITHUB_SHA
          curl -f -s -S -X POST ${{ steps.check-new-version.outputs.git-refs-url }} \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- << EOF
          {
            "ref": "refs/tags/v${{ steps.check-new-version.outputs.app-vsn }}",
            "sha": "$GITHUB_SHA"
          }
          EOF

      - name: Install flyctl
        if: steps.check-new-version.outputs.is-new-version
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy new release
        if: steps.check-new-version.outputs.is-new-version
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
