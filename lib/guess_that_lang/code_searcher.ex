defmodule GuessThatLang.CodeSearcher do
  @callback search(opts :: keyword()) ::
              {:ok, %{content: binary(), language: binary()}} | {:error, term()}

  def search(opts) do
    {:ok, %{
      content: "\npackage xj.mobile.builder\n\nimport xj.mobile.common.AppGenerator\nimport xj.mobile.transform.AppTransformer\nimport xj.mobile.model.Application\nimport xj.mobile.model.ui.View\nimport xj.mobile.tool.GraphViz\n\nimport static xj.mobile.util.CommonUtil.encodeAttributeValue\n\nimport static xj.translate.Logger.info \n\n/*\n * Common driver for all platforms\n *\n * To-do: each invocation should handle only one platform, \n *        reason: design and style transformation are applied to the model,\n *                each platform should start with a clean model\n */\nclass AppBuilder { \n\n  static ModelBuilder builder = new ModelBuilder()\n\n  static final boolean verbose = true //false\n  static final boolean WRITE_ATTRIBUTES = true\n  static final boolean GENERATE_DIAGRAMS = false // generate diagram in GraphViz \n\n\n  String filename\n  String target\n  def userConfig \n\n  static Application app = null\n  def classes = [:]\n\n  AppBuilder(filename = null, userConfig = null) { \n    this.filename = filename\n    this.userConfig = userConfig \n  }\n\n  //\n  // building app: called from script  \n  //\n\n  def app(args, closure = null) { \n    info '[AppBuilder] Start App Builder'\n    info \"[AppBuilder] classes: ${classes}\"\n\n    builder.reInit()\n    app = new Application()\n    if (classes) app.classes = classes \n\tbuilder.handleChildren(app, [ args ], closure)\n\tif (builder.isOkay()) { \n\t  if (app.mainView) process()\n\t} else { \n\t  println \"[Error] There are errors in the app definition.\"\n      builder.printMessages('[Error]')\n\t}\n    info '[AppBuilder] End App Builder'\n  }\n\n  //\n  // Processing app \n  //\n\n  void process() { \n    if (verbose) printApp()\n    if (WRITE_ATTRIBUTES) writeAttributes()\n    if (checkApp()) {\n\t  if (GENERATE_DIAGRAMS) GraphViz.generateDiagram(filename, app)\n      transformApp()\n      generateApp()\n    }\n  }\n\n  // Write to a file, the attributes used in each element in this app \n  // For generating documentation only, not used for code generation  \n  void writeAttributes() { \n    def attrMap = app.attributes() \n    new File('test/lang').mkdirs()\n    def file = new File(\"test/lang/${filename}-attr.txt\")\n    file.delete()\n    file = new File(\"test/lang/${filename}-attr.txt\")\n    attrMap.each{ key, value ->\n\t  value.each { v -> \n\t\t//println \"writeAttributes(): Type: ${v.value.class.name}  Value: ${v.value}\"\n\t\tif (v.value instanceof String || v.value instanceof GString) { \n\t\t  v.value = encodeAttributeValue(v.value)\n\t\t}\n\t  }\n      def vstr = value.sort { it.name }.join('\\n\\t')\n      file << \"${key}\\n\\t${vstr}\\n\"\n    }\n  }\n\n  void printApp() { \n    info '[AppBuilder] Application:\\n' + app.print()\n  }\n\n  boolean checkApp() { \n    AppChecker checker = new AppChecker(app)\n    if (checker.isOkay()) { \n      return true\n    } else {  \n      println \"[Error] There are errors in the app definition.\"\n      checker.printMessages('[Error]')\n      return false\n    }\n  }\n\n  void transformApp() { \n\tcanonicalization()\n\n    AppTransformer transformer = AppTransformer.getAppTransformer('common')\n    transformer.transform(app)\n\n    if (verbose)    \n      info \"[AppBuilder] After common transformation:\\n\" + app.print()\n  }\n\n  void canonicalization() { \n    // insert the root navigation view when necessary \n    if (app.mainView.widgetType != 'NavigationView') { \n\t  if (app.views.size() > 1 && app.views.every { it.widgetType != 'NavigationView' } && app.navigationBar || \n\t\t  app.mainView.widgetType == 'ListView' ||\n\t\t  app.mainView.widgetType == 'ExpandableListView') { \n\t\tdef top = new View()\n\t\ttop.'#type' = 'NavigationView' \n\t\ttop.id = Preprocessor.getID('top')\n\t\tapp.views.each { \n\t\t  top.add(it)\n\t\t  it.parent = top\n\t\t}\n\t\tapp.mainView = top\n\t\tapp.children = [ top ]\n\t\n\t\tif (verbose) info \"[AppBuilder] After canonicalization():\\n\" + app.print()\n      } \n      \n    }\n    app.mainView.root = true\n  }\n\n  void generateApp() { \n\tAppTransformer transformer = AppTransformer.getAppTransformer(target)\n\ttransformer.transform(app)\n\t\t\n\tif (verbose)\n\t  info \"[AppBuilder] After design transformation:\\n\" + app.print()\n\t\t\n\tAppGenerator generator = AppGenerator.getAppGenerator(target)"
    }}

    # config = Application.get_env(:guess_that_lang, __MODULE__)
    # searcher = Keyword.fetch!(config, :searcher)

    # searcher.search(opts)
  end
end
